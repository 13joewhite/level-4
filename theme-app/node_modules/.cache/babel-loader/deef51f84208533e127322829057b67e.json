{"ast":null,"code":"var _jsxFileName = \"/Users/josephwhite/Desktop/vschool/levels/level-4/theme-app/src/themeContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/React.createContext();\n\nfunction ThemeContextProvider(props) {\n  _s();\n\n  const [theme, setTheme] = useState(\"dark\");\n\n  function toggleTheme() {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      toggleTheme: toggleTheme\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ThemeContextProvider, \"MOCvl6iGOxSkmATsuDSc6CWgskg=\");\n\n_c = ThemeContextProvider;\nexport { ThemeContextProvider, ThemeContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["/Users/josephwhite/Desktop/vschool/levels/level-4/theme-app/src/themeContext.js"],"names":["React","useState","ThemeContext","createContext","ThemeContextProvider","props","theme","setTheme","toggleTheme","prevTheme","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AACA,MAAMC,YAAY,gBAAGF,KAAK,CAACG,aAAN,EAArB;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAoC;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,MAAD,CAAlC;;AAEA,WAASO,WAAT,GAAsB;AAClBD,IAAAA,QAAQ,CAACE,SAAS,IAAIA,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAA/C,CAAR;AACH;;AAED,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACH,MAAAA,KAAK,EAAEA,KAAR;AAAeE,MAAAA,WAAW,EAAEA;AAA5B,KAA9B;AAAA,cACKH,KAAK,CAACK;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAZQN,oB;;KAAAA,oB;AAeT,SAAQA,oBAAR,EAA8BF,YAA9B","sourcesContent":["import React ,{useState} from \"react\"\nconst ThemeContext = React.createContext()\n\nfunction ThemeContextProvider(props){\n    const [theme, setTheme] = useState(\"dark\")\n\n    function toggleTheme(){\n        setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\")\n    }\n\n    return (\n        <ThemeContext.Provider value={{theme: theme, toggleTheme: toggleTheme}}>\n            {props.children}\n        </ThemeContext.Provider>\n    )\n}\n\n\nexport {ThemeContextProvider, ThemeContext}"]},"metadata":{},"sourceType":"module"}